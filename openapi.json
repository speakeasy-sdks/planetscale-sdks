{
  "openapi": "3.0.1",
  "info": {
    "title": "PlanetScale API",
    "description": "\n<p>Another API description</p>\n&copy; 2023 PlanetScale, Inc.",
    "version": "v1",
    "x-copyright": "&copy; 2023 PlanetScale, Inc."
  },
  "servers": [
    {
      "url": "https://api.planetscale.com/v1"
    }
  ],
  "security": [
    {
      "ApiKeyHeader": [
        "Authorization"
      ]
    }
  ],
  "tags": [
    {
      "name": "Database branches",
      "description": "\n<p>API endpoints for managing database branches.</p>\n"
    },
    {
      "name": "Databases",
      "description": "\n<p>API endpoints for managing databases within an organization.</p>\n"
    },
    {
      "name": "Database branch passwords",
      "description": "\n<p>API endpoints for managing database branch passwords.</p>\n"
    },
    {
      "name": "OAuth applications",
      "description": "\n<p>API endpoints for fetching OAuth applications.</p>\n"
    },
    {
      "name": "OAuth tokens",
      "description": "\n<p>API endpoints for managing OAuth tokens.</p>\n"
    },
    {
      "name": "Organizations",
      "description": "\n<p>API endpoints for managing organizations.</p>\n"
    },
    {
      "name": "Users",
      "description": "\n<p>API endpoints for fetching user information.</p>\n"
    },
    {
      "name": "Deploy requests",
      "description": "\n<p>API endpoints for managing database deploy requests.</p>\n"
    }
  ],
  "paths": {
    "/organizations": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "List organizations",
        "description": "\n### Authorization\nA   OAuth token must have the following   scopes in order to use this API endpoint:\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| User | `read_organizations` |",
        "operationId": "list-organizations",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "If provided, specifies the page offset of returned results",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If provided, specifies the number of returned results",
            "schema": {
              "type": "number",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets the organizations for the current user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/organizations/{name}": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get an organization",
        "description": "\n### Authorization\nA   OAuth token must have the following   scopes in order to use this API endpoint:\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| User | `read_organizations` |\n| Organization | `read_organization` |",
        "operationId": "get-an-organization",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "Organizations"
        ],
        "summary": "Update an organization",
        "description": "\n### Authorization\nA   OAuth token must have the following   scopes in order to use this API endpoint:\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `write_organization` |",
        "operationId": "update-an-organization",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "billing_email": {
                    "type": "string",
                    "description": "The billing email for the organization"
                  },
                  "require_admin_for_production_access": {
                    "type": "boolean",
                    "description": "Whether or not only admins can access production"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Returns the updated organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{name}/region": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "List regions for an organization",
        "description": "\n### Authorization\nA   OAuth token must have the following   scopes in order to use this API endpoint:\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| User | `read_organizations` |\n| Organization | `read_organization` |",
        "operationId": "list-regions-for-an-organization",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "If provided, specifies the page offset of returned results",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If provided, specifies the number of returned results",
            "schema": {
              "type": "number",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the organization's regions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/organizations/{organization}/databases": {
      "get": {
        "tags": [
          "Databases"
        ],
        "summary": "List databases",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_database`, `delete_database`, `write_database`, `read_branch`, `delete_branch`, `create_branch`, `delete_production_branch`, `connect_branch`, `connect_production_branch`, `delete_branch_password`, `delete_production_branch_password`, `read_deploy_request`, `create_deploy_request`, `approve_deploy_request`, `read_comment`, `create_comment`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_databases` |",
        "operationId": "list-databases",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the database belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "If provided, specifies the page offset of returned results",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If provided, specifies the number of returned results",
            "schema": {
              "type": "number",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieves the databases for an organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Databases"
        ],
        "summary": "Create a database",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `create_databases`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `create_databases` |",
        "operationId": "create-a-database",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the database belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the database"
                  },
                  "notes": {
                    "type": "string",
                    "description": "Notes about the database"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Returns the created database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{organization}/databases/{database}/branches": {
      "get": {
        "tags": [
          "Database branches"
        ],
        "summary": "List branches",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_branches` |\n| Database | `read_branches` |\n| Branch | `read_branch` |",
        "operationId": "list-branches",
        "parameters": [
          {
            "name": "database",
            "in": "path",
            "description": "The name of the database the branch belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the branch belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "If provided, specifies the page offset of returned results",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If provided, specifies the number of returned results",
            "schema": {
              "type": "number",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns database branches",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Database branches"
        ],
        "summary": "Create a branch",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `create_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `write_branches` |\n| Database | `write_branches` |",
        "operationId": "create-a-branch",
        "parameters": [
          {
            "name": "database",
            "in": "path",
            "description": "The name of the database the branch belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the branch belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "parent_branch"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the branch"
                  },
                  "parent_branch": {
                    "type": "string",
                    "description": "Parent branch"
                  },
                  "backup_id": {
                    "type": "string",
                    "description": "If provided, restores the backup's schema and data to the new branch"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Returns the created branch",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{branch}/passwords": {
      "get": {
        "tags": [
          "Database branch passwords"
        ],
        "summary": "List branch passwords",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `manage_passwords` |\n| Database | `manage_passwords` |\n| Branch | `manage_passwords` |",
        "operationId": "list-branch-passwords",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "description": "The name of the branch the password belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "description": "The name of the database the password belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the password belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "read_only_region_id",
            "in": "query",
            "description": "A read-only region of the database branch. If present, the password results will be filtered to only those in the region",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "If provided, specifies the page offset of returned results",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If provided, specifies the number of returned results",
            "schema": {
              "type": "number",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets the passwords for the database branch",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Database branch passwords"
        ],
        "summary": "Create a branch password",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `connect_production_branch`, `create_branch_password`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `manage_passwords` |\n| Database | `manage_passwords` |\n| Branch | `manage_passwords` |",
        "operationId": "create-a-branch-password",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "description": "The name of the branch the password belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "description": "The name of the database the password belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the password belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "The database role of the password (i.e. admin)",
                    "enum": [
                      "reader",
                      "writer",
                      "admin",
                      "readwriter"
                    ]
                  },
                  "ttl": {
                    "type": "number",
                    "description": "Time to live (in seconds) for the password. The password will be invalid when TTL has passed"
                  },
                  "read_only_region_id": {
                    "type": "string",
                    "description": "A read-only region of the database branch"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Creates a database branch password",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}": {
      "get": {
        "tags": [
          "Database branch passwords"
        ],
        "summary": "Get a branch password",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `manage_passwords` |\n| Database | `manage_passwords` |\n| Branch | `manage_passwords` |",
        "operationId": "get-a-branch-password",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the password",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "path",
            "description": "The name of the branch the password belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "description": "The name of the database the password belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the password belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "read_only_region_id",
            "in": "query",
            "description": "A read-only region of the database branch. If present, the password results will be filtered to only those in the region",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets the database branch password",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Database branch passwords"
        ],
        "summary": "Delete a branch password",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `delete_production_branch_password`, `delete_branch_password`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `manage_passwords`, `manage_production_branch_passwords` |\n| Database | `manage_passwords`, `manage_production_branch_passwords` |\n| Branch | `manage_passwords` |",
        "operationId": "delete-a-branch-password",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the password",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "path",
            "description": "The name of the branch the password belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "description": "The name of the database the password belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the password belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deletes the database branch password",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "Database branch passwords"
        ],
        "summary": "Update a branch password",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `connect_production_branch`, `create_branch_password`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `manage_passwords` |\n| Database | `manage_passwords` |\n| Branch | `manage_passwords` |",
        "operationId": "update-a-branch-password",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the password",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "path",
            "description": "The name of the branch the password belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "description": "The name of the database the password belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the password belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "display_name"
                ],
                "type": "object",
                "properties": {
                  "display_name": {
                    "type": "string",
                    "description": "The display name for the password"
                  },
                  "read_only_region_id": {
                    "type": "string",
                    "description": "A read-only region of the database branch. If present, the password results will be filtered to only those in the region"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Updates a database branch password",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}/renew": {
      "post": {
        "tags": [
          "Database branch passwords"
        ],
        "summary": "Renew a branch password",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `connect_production_branch`, `create_branch_password`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `manage_passwords` |\n| Database | `manage_passwords` |\n| Branch | `manage_passwords` |",
        "operationId": "renew-a-branch-password",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the password",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "path",
            "description": "The name of the branch the password belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "description": "The name of the database the password belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the password belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "read_only_region_id": {
                    "type": "string",
                    "description": "A read-only region of the database branch. If present, the password results will be filtered to only those in the region"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Updates a database branch password",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{name}": {
      "get": {
        "tags": [
          "Database branches"
        ],
        "summary": "Get a branch",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_branches` |\n| Database | `read_branches` |\n| Branch | `read_branch` |",
        "operationId": "get-a-branch",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "description": "The name of the database the branch belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the branch belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns information about a branch",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Database branches"
        ],
        "summary": "Delete a branch",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `delete_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `delete_branches`, `delete_production_branches` |\n| Database | `delete_branches`, `delete_production_branches` |\n| Branch | `delete_branch` |",
        "operationId": "delete-a-branch",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "description": "The name of the database the branch belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the branch belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a branch",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{name}/demote": {
      "post": {
        "tags": [
          "Database branches"
        ],
        "summary": "Demote a branch",
        "description": "\n<p>Demote a branch from production to development</p>\n\n### Authorization\nA   OAuth token must have the following   scopes in order to use this API endpoint:\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `demote_branches` |\n| Database | `demote_branches` |",
        "operationId": "demote-a-branch",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Demotes a branch from production to development",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{name}/demotion-request": {
      "get": {
        "tags": [
          "Database branches"
        ],
        "summary": "Get a demotion request",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `connect_branch`, `read_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_branches` |\n| Database | `read_branches` |\n| Branch | `read_branch` |",
        "operationId": "get-a-demotion-request",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "description": "The name of the database the branch belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the branch belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the branch demotion request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Database branches"
        ],
        "summary": "Cancel or deny a demotion request",
        "description": "\n<p>Cancels or denies a demotion request for a database branch</p>\n\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `demote_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `demote_branches` |\n| Database | `demote_branches` |",
        "operationId": "cancel-or-deny-a-demotion-request",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "description": "The name of the database the branch belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the branch belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Undoes a demotion request for a branch",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{name}/promotion-request": {
      "get": {
        "tags": [
          "Database branches"
        ],
        "summary": "Get a promotion request",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `connect_production_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `promote_branches` |\n| Database | `promote_branches` |",
        "operationId": "get-a-promotion-request",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "description": "The name of the database the branch belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the branch belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The promotion request for a branch",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Database branches"
        ],
        "summary": "Create a promotion request",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `connect_production_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `promote_branches` |\n| Database | `promote_branches` |",
        "operationId": "create-a-promotion-request",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "description": "The name of the database the branch belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the branch belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The branch promotion request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{name}/schema": {
      "get": {
        "tags": [
          "Database branches"
        ],
        "summary": "Get a branch schema",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_branches` |\n| Database | `read_branches` |\n| Branch | `read_branch` |",
        "operationId": "get-a-branch-schema",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "description": "The name of the database the branch belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the branch belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keyspace",
            "in": "query",
            "description": "If provided, the schema for this keyspace is returned",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets the schema for the branch",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{name}/status": {
      "get": {
        "tags": [
          "Database branches"
        ],
        "summary": "Get branch status",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_branches` |\n| Database | `read_branches` |\n| Branch | `read_branch` |",
        "operationId": "get-branch-status",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "description": "The name of the database the branch belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the branch belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the branch status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-queue": {
      "get": {
        "tags": [
          "Deploy requests"
        ],
        "summary": "Get a deploy queue",
        "description": "\n<p>Get the deploy queue for a database</p>\n\n",
        "operationId": "get-a-deploy-queue",
        "parameters": [
          {
            "name": "database",
            "in": "path",
            "description": "The name of the deploy request's database",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the deploy request's organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deploy queue for a database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests": {
      "get": {
        "tags": [
          "Deploy requests"
        ],
        "summary": "List deploy requests",
        "description": "\n<p>List deploy requests for a database</p>\n\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_deploy_requests` |\n| Database | `read_deploy_requests` |",
        "operationId": "list-deploy-requests",
        "parameters": [
          {
            "name": "database",
            "in": "path",
            "description": "The name of the deploy request's database",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the deploy request's organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "If provided, specifies the page offset of returned results",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If provided, specifies the number of returned results",
            "schema": {
              "type": "number",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of deploy requests for a database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Deploy requests"
        ],
        "summary": "Create a deploy request",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`, `create_deploy_requests`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `write_deploy_requests` |\n| Database | `write_deploy_requests` |",
        "operationId": "create-a-deploy-request",
        "parameters": [
          {
            "name": "database",
            "in": "path",
            "description": "The name of the deploy request's database",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the deploy request's organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "number": {
                    "type": "string",
                    "description": "The number of the deploy request"
                  },
                  "branch": {
                    "type": "string",
                    "description": "The name of the branch the deploy request is created from"
                  },
                  "into_branch": {
                    "type": "string",
                    "description": "The name of the branch the deploy request will be merged into"
                  },
                  "notes": {
                    "type": "string",
                    "description": "Notes about the deploy request"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Returns the created deploy request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}": {
      "get": {
        "tags": [
          "Deploy requests"
        ],
        "summary": "Get a deploy request",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_deploy_requests` |\n| Database | `read_deploy_requests` |",
        "operationId": "get-a-deploy-request",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "The number of the deploy request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "description": "The name of the deploy request's database",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the deploy request's organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns information about a deploy request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Deploy requests"
        ],
        "summary": "Close a deploy request",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `write_deploy_requests` |\n| Database | `write_deploy_requests` |",
        "operationId": "close-a-deploy-request",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "The number of the deploy request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "description": "The name of the deploy request's database",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the deploy request's organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "state": {
                    "type": "string",
                    "description": "The deploy request will be updated to this state",
                    "enum": [
                      "closed"
                    ]
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Returns the updated deploy request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/apply-deploy": {
      "post": {
        "tags": [
          "Deploy requests"
        ],
        "summary": "Complete a gated deploy request",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`, `create_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `deploy_deploy_requests` |\n| Database | `deploy_deploy_requests` |",
        "operationId": "complete-a-gated-deploy-request",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "The number of the deploy request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "description": "The name of the deploy request's database",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the deploy request's organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deploy request whose deployment has been completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/auto-apply": {
      "put": {
        "tags": [
          "Deploy requests"
        ],
        "summary": "Update auto-apply for deploy request",
        "description": "\n<p>Enables or disabled the auto-apply setting for a deploy request</p>\n\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`, `create_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `deploy_deploy_requests` |\n| Database | `deploy_deploy_requests` |",
        "operationId": "update-auto-apply-for-deploy-request",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "The number of the deploy request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "description": "The name of the deploy request's database",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the deploy request's organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deploy request whose auto-apply setting was updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/cancel": {
      "post": {
        "tags": [
          "Deploy requests"
        ],
        "summary": "Cancel a queued deploy request",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`, `create_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `deploy_deploy_requests` |\n| Database | `deploy_deploy_requests` |",
        "operationId": "cancel-a-queued-deploy-request",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "The number of the deploy request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "description": "The name of the deploy request's database",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the deploy request's organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deploy request whose deployment was canceled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/complete-deploy": {
      "post": {
        "tags": [
          "Deploy requests"
        ],
        "summary": "Complete an errored deploy",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`, `create_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `deploy_deploy_requests` |\n| Database | `deploy_deploy_requests` |",
        "operationId": "complete-an-errored-deploy",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "The number of the deploy request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "description": "The name of the deploy request's database",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the deploy request's organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the completed deploy request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/deploy": {
      "post": {
        "tags": [
          "Deploy requests"
        ],
        "summary": "Queue a deploy request",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`, `create_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `deploy_deploy_requests` |\n| Database | `deploy_deploy_requests` |",
        "operationId": "queue-a-deploy-request",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "The number of the deploy request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "description": "The name of the database the deploy request belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the deploy request belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deployed deploy request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/deployment": {
      "get": {
        "tags": [
          "Deploy requests"
        ],
        "summary": "Get a deployment",
        "description": "\n<p>Get the deployment for a deploy request</p>\n\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_deploy_requests` |\n| Database | `read_deploy_requests` |",
        "operationId": "get-a-deployment",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "The number of the deploy request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "description": "The name of the deploy request's database",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the deploy request's organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deployment for a deploy request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/operations": {
      "get": {
        "tags": [
          "Deploy requests"
        ],
        "summary": "List deploy operations",
        "description": "\n<p>List deploy operations for a deploy request</p>\n\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_deploy_requests` |\n| Database | `read_deploy_requests` |",
        "operationId": "list-deploy-operations",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "The number of the deploy request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "description": "The name of the database the deploy request belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the deploy request belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "If provided, specifies the page offset of returned results",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If provided, specifies the number of returned results",
            "schema": {
              "type": "number",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of deploy operations for the deploy request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/revert": {
      "post": {
        "tags": [
          "Deploy requests"
        ],
        "summary": "Complete a revert",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`, `create_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `deploy_deploy_requests` |\n| Database | `deploy_deploy_requests` |",
        "operationId": "complete-a-revert",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "The number of the deploy request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "description": "The name of the deploy request's database",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the deploy request's organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deploy request that was reverted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/skip-revert": {
      "post": {
        "tags": [
          "Deploy requests"
        ],
        "summary": "Skip revert period",
        "description": "\n<p>Skips the revert period for a deploy request</p>\n\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`, `create_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `deploy_deploy_requests` |\n| Database | `deploy_deploy_requests` |",
        "operationId": "skip-revert-period",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "The number of the deploy request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "description": "The name of the deploy request's database",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the deploy request's organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deploy request whose deploy revert was skipped",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization}/databases/{name}": {
      "get": {
        "tags": [
          "Databases"
        ],
        "summary": "Get a database",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_database`, `delete_database`, `write_database`, `read_branch`, `delete_branch`, `create_branch`, `delete_production_branch`, `connect_branch`, `connect_production_branch`, `delete_branch_password`, `delete_production_branch_password`, `read_deploy_request`, `create_deploy_request`, `approve_deploy_request`, `read_comment`, `create_comment`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_databases` |\n| Database | `read_database` |",
        "operationId": "get-a-database",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the database",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the database belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Databases"
        ],
        "summary": "Delete a database",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `delete_database`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `delete_databases` |\n| Database | `delete_database` |",
        "operationId": "delete-a-database",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the database",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the database belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deletes a database",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "Databases"
        ],
        "summary": "Update database settings",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `write_database`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `write_databases` |\n| Database | `write_database` |",
        "operationId": "update-database-settings",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the database",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the database belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "notes": {
                    "type": "string",
                    "description": "Notes on the database"
                  },
                  "automatic_migrations": {
                    "type": "boolean",
                    "description": "Whether or not to copy migration data to new branches and in deploy requests."
                  },
                  "migration_framework": {
                    "type": "string",
                    "description": "A migration framework to use on the database"
                  },
                  "migration_table_name": {
                    "type": "string",
                    "description": "Name of table to use as migration table for the database"
                  },
                  "require_approval_for_deploy": {
                    "type": "boolean",
                    "description": "Whether or not deploy requests must be approved by a database administrator other than the request creator"
                  },
                  "restrict_branch_region": {
                    "type": "boolean",
                    "description": "Whether or not to limit branch creation to the AWS us-east-1 region."
                  },
                  "allow_data_branching": {
                    "type": "boolean",
                    "description": "Whether or not data branching is allowed on the database"
                  },
                  "insights_raw_queries": {
                    "type": "boolean",
                    "description": "Whether or not full queries should be collected from the database"
                  },
                  "production_branch_web_console": {
                    "type": "boolean",
                    "description": "Whether or not the web console can be used on the production branch of the database"
                  },
                  "default_branch": {
                    "type": "string",
                    "description": "The default branch of the database"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Returns the updated database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{organization}/databases/{name}/promotion-requests": {
      "get": {
        "tags": [
          "Databases"
        ],
        "summary": "List database promotion requests",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_database`, `delete_database`, `write_database`, `read_branch`, `delete_branch`, `create_branch`, `delete_production_branch`, `connect_branch`, `connect_production_branch`, `delete_branch_password`, `delete_production_branch_password`, `read_deploy_request`, `create_deploy_request`, `approve_deploy_request`, `read_comment`, `create_comment`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_databases` |\n| Database | `read_database` |",
        "operationId": "list-database-promotion-requests",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the database",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the database belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "If provided, specifies the page offset of returned results",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If provided, specifies the number of returned results",
            "schema": {
              "type": "number",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Promotion requests for the database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/organizations/{organization}/databases/{name}/read-only-regions": {
      "get": {
        "tags": [
          "Databases"
        ],
        "summary": "List read-only regions",
        "description": "\n<p>List read-only regions for the database’s default branch</p>\n\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_database`, `delete_database`, `write_database`, `read_branch`, `delete_branch`, `create_branch`, `delete_production_branch`, `connect_branch`, `connect_production_branch`, `delete_branch_password`, `delete_production_branch_password`, `read_deploy_request`, `create_deploy_request`, `approve_deploy_request`, `read_comment`, `create_comment`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_branches` |\n| Database | `read_branches` |",
        "operationId": "list-read-only-regions",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the database",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the database belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "If provided, specifies the page offset of returned results",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If provided, specifies the number of returned results",
            "schema": {
              "type": "number",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of the database's read-only regions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/organizations/{organization}/databases/{name}/regions": {
      "get": {
        "tags": [
          "Databases"
        ],
        "summary": "List database regions",
        "description": "\n### Authorization\nA service token or OAuth token must have the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_database`, `delete_database`, `write_database`, `read_branch`, `delete_branch`, `create_branch`, `delete_production_branch`, `connect_branch`, `connect_production_branch`, `delete_branch_password`, `delete_production_branch_password`, `read_deploy_request`, `create_deploy_request`, `approve_deploy_request`, `read_comment`, `create_comment`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_databases` |\n| Database | `read_database` |",
        "operationId": "list-database-regions",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the database",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the database belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "If provided, specifies the page offset of returned results",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If provided, specifies the number of returned results",
            "schema": {
              "type": "number",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the available regions for a database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/organizations/{organization}/oauth-applications": {
      "get": {
        "tags": [
          "OAuth applications"
        ],
        "summary": "List OAuth applications",
        "description": "\n### Authorization\nA service token   must have the following access   in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_oauth_applications`\n\n",
        "operationId": "list-oauth-applications",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the OAuth application belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "If provided, specifies the page offset of returned results",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If provided, specifies the number of returned results",
            "schema": {
              "type": "number",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of the organization's oauth applications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/organizations/{organization}/oauth-applications/{application_id}": {
      "get": {
        "tags": [
          "OAuth applications"
        ],
        "summary": "Get an OAuth application",
        "description": "\n### Authorization\nA service token   must have the following access   in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_oauth_applications`\n\n",
        "operationId": "get-an-oauth-application",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "The ID of the OAuth application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the OAuth application belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns information abuot an OAuth application",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/organizations/{organization}/oauth-applications/{application_id}/tokens": {
      "get": {
        "tags": [
          "OAuth applications"
        ],
        "summary": "List OAuth tokens",
        "description": "\n<p>List OAuth tokens created by an OAuth application</p>\n\n### Authorization\nA service token   must have the following access   in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_oauth_tokens`\n\n",
        "operationId": "list-oauth-tokens",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "The ID of the OAuth application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the OAuth application belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "If provided, specifies the page offset of returned results",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If provided, specifies the number of returned results",
            "schema": {
              "type": "number",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of OAuth tokens issued on behalf of the OAuth application",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/organizations/{organization}/oauth-applications/{application_id}/tokens/{token_id}": {
      "get": {
        "tags": [
          "OAuth applications"
        ],
        "summary": "Get an OAuth token",
        "description": "\n### Authorization\nA service token   must have the following access   in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_oauth_tokens`\n\n",
        "operationId": "get-an-oauth-token",
        "parameters": [
          {
            "name": "token_id",
            "in": "path",
            "description": "The ID of the OAuth application token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "application_id",
            "in": "path",
            "description": "The ID of the OAuth application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the OAuth application belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an OAuth token that was issued on behalf of the OAuth application",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "OAuth applications"
        ],
        "summary": "Delete an OAuth token",
        "description": "\n### Authorization\nA service token   must have the following access   in order to use this API endpoint:\n\n**Service Token Accesses**\n `delete_oauth_tokens`\n\n",
        "operationId": "delete-an-oauth-token",
        "parameters": [
          {
            "name": "token_id",
            "in": "path",
            "description": "The ID of the OAuth application token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "application_id",
            "in": "path",
            "description": "The ID of the OAuth application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the OAuth application belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deletes an OAuth application's OAuth token",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/organizations/{organization}/oauth-applications/{id}/token": {
      "post": {
        "tags": [
          "OAuth tokens"
        ],
        "summary": "Create or renew an OAuth token",
        "description": "\n<p>Create an OAuth token from an authorization grant code, or refresh an OAuth token from a refresh token</p>\n\n### Authorization\nA service token   must have the following access   in order to use this API endpoint:\n\n**Service Token Accesses**\n `write_oauth_tokens`\n\n",
        "operationId": "create-or-renew-an-oauth-token",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the OAuth application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "The name of the organization the OAuth application belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "client_id",
                  "client_secret",
                  "grant_type"
                ],
                "type": "object",
                "properties": {
                  "client_id": {
                    "type": "string",
                    "description": "The OAuth application's client ID"
                  },
                  "client_secret": {
                    "type": "string",
                    "description": "The OAuth applicatin's client secret"
                  },
                  "grant_type": {
                    "type": "string",
                    "description": "Whether an OAuth grant code or a refresh token is being exchanged for an OAuth token",
                    "enum": [
                      "authorization_code",
                      "refresh_token"
                    ]
                  },
                  "code": {
                    "type": "string",
                    "description": "The OAuth grant code provided to your OAuth application's redirect URI. Required when grant_type is authorization_code"
                  },
                  "redirect_uri": {
                    "type": "string",
                    "description": "The OAuth application's redirect URI. Required when grant_type is authorization_code"
                  },
                  "refresh_token": {
                    "type": "string",
                    "description": "The refresh token from the original OAuth token grant. Required when grant_type is refresh_token"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Returns the created OAuth token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/user": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user",
        "description": "\n<p>Get the user associated with this service token</p>\n\n",
        "operationId": "get-current-user",
        "responses": {
          "200": {
            "description": "Returns the current user that is associated with this service token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "get_organizations_organization_databases_database_branches_param_data": {
        "required": [
          "access_host_url",
          "api_actor",
          "created_at",
          "html_url",
          "id",
          "initial_restore_id",
          "multiple_admins_required_for_demotion",
          "mysql_address",
          "mysql_edge_address",
          "name",
          "parent_branch",
          "planetscale_region",
          "production",
          "ready",
          "restore_checklist_completed_at",
          "restored_from_branch",
          "schema_last_updated_at",
          "shard_count",
          "sharded",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the branch"
          },
          "name": {
            "type": "string",
            "description": "The name of the branch"
          },
          "created_at": {
            "type": "string",
            "description": "When the branch was created"
          },
          "updated_at": {
            "type": "string",
            "description": "When the branch was last updated"
          },
          "restore_checklist_completed_at": {
            "type": "string",
            "description": "When a user last marked a backup restore checklist as completed"
          },
          "access_host_url": {
            "type": "string",
            "description": "The access host URL for the branch"
          },
          "schema_last_updated_at": {
            "type": "string",
            "description": "When the schema for the branch was last updated"
          },
          "mysql_address": {
            "type": "string",
            "description": "The MySQL address for the branch"
          },
          "mysql_edge_address": {
            "type": "string",
            "description": "The address of the MySQL provider for the branch"
          },
          "initial_restore_id": {
            "type": "string",
            "description": "The ID of the backup from which the branch was restored"
          },
          "ready": {
            "type": "boolean",
            "description": "Whether or not the branch is ready to serve queries"
          },
          "production": {
            "type": "boolean",
            "description": "Whether or not the branch is a production branch"
          },
          "sharded": {
            "type": "boolean",
            "description": "Whether or not the branch is sharded"
          },
          "shard_count": {
            "type": "number",
            "description": "The number of shards in the branch"
          },
          "api_actor": {
            "required": [
              "avatar_url",
              "display_name",
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the actor"
              },
              "display_name": {
                "type": "string",
                "description": "The name of the actor"
              },
              "avatar_url": {
                "type": "string",
                "description": "The URL of the actor's avatar"
              }
            }
          },
          "restored_from_branch": {
            "required": [
              "created_at",
              "deleted_at",
              "id",
              "name",
              "updated_at"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID for the resource"
              },
              "name": {
                "type": "string",
                "description": "The name for the resource"
              },
              "created_at": {
                "type": "string",
                "description": "When the resource was created"
              },
              "updated_at": {
                "type": "string",
                "description": "When the resource was last updated"
              },
              "deleted_at": {
                "type": "string",
                "description": "When the resource was deleted, if deleted"
              }
            }
          },
          "html_url": {
            "type": "string",
            "description": "Planetscale app URL for the branch"
          },
          "planetscale_region": {
            "required": [
              "display_name",
              "enabled",
              "id",
              "location",
              "provider",
              "public_ip_addresses",
              "slug"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the region"
              },
              "provider": {
                "type": "string",
                "description": "Provider for the region (ex. AWS)"
              },
              "enabled": {
                "type": "string",
                "description": "Whether or not the region is currently active"
              },
              "public_ip_addresses": {
                "type": "array",
                "description": "Public IP addresses for the region",
                "items": {
                  "type": "string"
                }
              },
              "display_name": {
                "type": "string",
                "description": "Name of the region"
              },
              "location": {
                "type": "string",
                "description": "Location of the region"
              },
              "slug": {
                "type": "string",
                "description": "The slug of the region"
              }
            }
          },
          "parent_branch": {
            "type": "string",
            "description": "The name of the parent branch from which the branch was created"
          },
          "multiple_admins_required_for_demotion": {
            "type": "boolean",
            "description": "Whether or not multiple admins must approve of demotion before this branch is demoted"
          }
        }
      },
      "get_organizations_organization_databases_param_data": {
        "required": [
          "allow_data_branching",
          "at_backup_restore_branches_limit",
          "at_development_branch_limit",
          "automatic_migrations",
          "branches_count",
          "branches_url",
          "created_at",
          "data_import",
          "default_branch",
          "default_branch_read_only_regions_count",
          "default_branch_shard_count",
          "default_branch_table_count",
          "development_branches_count",
          "html_url",
          "id",
          "insights_raw_queries",
          "issues_count",
          "migration_framework",
          "migration_table_name",
          "multiple_admins_required_for_deletion",
          "name",
          "notes",
          "plan",
          "production_branch_web_console",
          "production_branches_count",
          "ready",
          "region",
          "require_approval_for_deploy",
          "restrict_branch_region",
          "schema_last_updated_at",
          "sharded",
          "state",
          "type",
          "updated_at",
          "url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the database"
          },
          "type": {
            "type": "string",
            "description": "The object type"
          },
          "url": {
            "type": "string",
            "description": "The URL to the database API endpoint"
          },
          "branches_url": {
            "type": "string",
            "description": "The URL to retrieve this database's branches via the API"
          },
          "branches_count": {
            "type": "number",
            "description": "The total number of database branches"
          },
          "development_branches_count": {
            "type": "number",
            "description": "The total number of database development branches"
          },
          "production_branches_count": {
            "type": "number",
            "description": "The total number of database production branches"
          },
          "issues_count": {
            "type": "number",
            "description": "The total number of ongoing issues within a database"
          },
          "multiple_admins_required_for_deletion": {
            "type": "boolean",
            "description": "If the database requires multiple admins for deletion"
          },
          "ready": {
            "type": "boolean",
            "description": "If the database is ready to be used"
          },
          "at_development_branch_limit": {
            "type": "boolean",
            "description": "If the database has reached its development branch limit"
          },
          "at_backup_restore_branches_limit": {
            "type": "boolean",
            "description": "If the database has reached its backup restored branch limit"
          },
          "data_import": {
            "required": [
              "data_source",
              "finished_at",
              "import_check_errors",
              "started_at",
              "state"
            ],
            "type": "object",
            "properties": {
              "state": {
                "type": "string"
              },
              "import_check_errors": {
                "type": "string"
              },
              "started_at": {
                "type": "string"
              },
              "finished_at": {
                "type": "string"
              },
              "data_source": {
                "required": [
                  "database",
                  "hostname",
                  "port"
                ],
                "type": "object",
                "properties": {
                  "hostname": {
                    "type": "string"
                  },
                  "port": {
                    "type": "string"
                  },
                  "database": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "region": {
            "required": [
              "display_name",
              "enabled",
              "id",
              "location",
              "provider",
              "public_ip_addresses",
              "slug"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the region"
              },
              "provider": {
                "type": "string",
                "description": "Provider for the region (ex. AWS)"
              },
              "enabled": {
                "type": "string",
                "description": "Whether or not the region is currently active"
              },
              "public_ip_addresses": {
                "type": "array",
                "description": "Public IP addresses for the region",
                "items": {
                  "type": "string"
                }
              },
              "display_name": {
                "type": "string",
                "description": "Name of the region"
              },
              "location": {
                "type": "string",
                "description": "Location of the region"
              },
              "slug": {
                "type": "string",
                "description": "The slug of the region"
              }
            }
          },
          "html_url": {
            "type": "string",
            "description": "The URL to see this database's branches in the web UI"
          },
          "name": {
            "type": "string",
            "description": "Name of the database"
          },
          "notes": {
            "type": "string",
            "description": "Notes about the database"
          },
          "state": {
            "type": "string",
            "description": "State of the database"
          },
          "sharded": {
            "type": "boolean",
            "description": "If the database is sharded"
          },
          "default_branch_shard_count": {
            "type": "number",
            "description": "Number of shards in the default branch"
          },
          "default_branch_read_only_regions_count": {
            "type": "number",
            "description": "Number of read only regions in the default branch"
          },
          "default_branch_table_count": {
            "type": "number",
            "description": "Number of tables in the default branch schema"
          },
          "default_branch": {
            "type": "string",
            "description": "The default branch for the database"
          },
          "require_approval_for_deploy": {
            "type": "boolean",
            "description": "Whether an approval is required to deploy schema changes to this database"
          },
          "allow_data_branching": {
            "type": "boolean",
            "description": "Whether seeding branches with data is enabled for all branches"
          },
          "automatic_migrations": {
            "type": "boolean",
            "description": "Whether to automatically manage Rails migrations during deploy requests"
          },
          "restrict_branch_region": {
            "type": "boolean",
            "description": "Whether to restrict branch creation to one region"
          },
          "insights_raw_queries": {
            "type": "boolean",
            "description": "Whether raw SQL queries are collected"
          },
          "plan": {
            "type": "string",
            "description": "The database plan"
          },
          "production_branch_web_console": {
            "type": "boolean",
            "description": "Whether web console is enabled for production branches"
          },
          "migration_table_name": {
            "type": "string",
            "description": "Table name to use for copying schema migration data"
          },
          "migration_framework": {
            "type": "string",
            "description": "Framework used for applying migrations"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "schema_last_updated_at": {
            "type": "string",
            "description": "When the default branch schema was last changed."
          }
        }
      },
      "get_organizations_organization_databases_name_regions_param_data": {
        "required": [
          "display_name",
          "enabled",
          "id",
          "location",
          "provider",
          "public_ip_addresses",
          "slug"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the region"
          },
          "provider": {
            "type": "string",
            "description": "Provider for the region (ex. AWS)"
          },
          "enabled": {
            "type": "string",
            "description": "Whether or not the region is currently active"
          },
          "public_ip_addresses": {
            "type": "array",
            "description": "Public IP addresses for the region",
            "items": {
              "type": "string"
            }
          },
          "display_name": {
            "type": "string",
            "description": "Name of the region"
          },
          "location": {
            "type": "string",
            "description": "Location of the region"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the region"
          }
        }
      },
      "get_organizations_organization_databases_name_promotion-requests_param_branch_promotion_request_lint_errors": {
        "type": "object",
        "properties": {
          "lint_error": {
            "type": "number"
          },
          "subject_type": {
            "type": "number"
          },
          "keyspace_name": {
            "type": "string"
          },
          "table_name": {
            "type": "string"
          },
          "error_description": {
            "type": "string"
          },
          "docs_url": {
            "type": "string"
          },
          "column_name": {
            "type": "string"
          },
          "foreign_key_column_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "auto_increment_column_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "charset_name": {
            "type": "string"
          },
          "engine_name": {
            "type": "string"
          },
          "vindex_name": {
            "type": "string"
          },
          "json_path": {
            "type": "string"
          },
          "check_constraint_name": {
            "type": "boolean"
          },
          "enum_value": {
            "type": "string"
          },
          "partitioning_type": {
            "type": "string"
          },
          "partition_name": {
            "type": "string"
          },
          "url_hash": {
            "type": "string"
          }
        }
      },
      "get_organizations_organization_databases_name_promotion-requests_param_data": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "The current state of the branch promotion request",
            "enum": [
              "pending",
              "promoted",
              "lint_error"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "When the branch promotion request was created"
          },
          "updated_at": {
            "type": "string",
            "description": "When the branch promotion request was last updated"
          },
          "started_at": {
            "type": "string",
            "description": "When branch promotion started for the branch promotion request"
          },
          "finished_at": {
            "type": "string",
            "description": "When the branch promotion was completed"
          },
          "branch_promotion_request_lint_errors": {
            "type": "array",
            "description": "Lint errors for the branch promotion request",
            "items": {
              "$ref": "#/components/schemas/get_organizations_organization_databases_name_promotion-requests_param_branch_promotion_request_lint_errors"
            }
          },
          "branch": {
            "type": "string",
            "description": "The name of the branch associated with this branch promotion request"
          },
          "id": {
            "type": "string",
            "description": "The ID of the branch promotion request"
          },
          "actor": {
            "required": [
              "avatar_url",
              "display_name",
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the actor"
              },
              "display_name": {
                "type": "string",
                "description": "The name of the actor"
              },
              "avatar_url": {
                "type": "string",
                "description": "The URL of the actor's avatar"
              }
            }
          },
          "syntax_highlighted_lint_errors": {
            "type": "object",
            "properties": {
              "subject_type": {
                "type": "string",
                "description": "The subject of the syntax error",
                "enum": [
                  "vschema",
                  "table",
                  "routing_rules"
                ]
              },
              "keyspace_name": {
                "type": "string",
                "description": "The keyspace of the syntax error"
              },
              "table_name": {
                "type": "string",
                "description": "The table name of the syntax error"
              },
              "html": {
                "type": "string",
                "description": "An HTML string representing the syntax error"
              }
            }
          }
        }
      },
      "get_organizations_organization_databases_database_branches_branch_passwords_param_integrations": {
        "required": [
          "content",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "content": {
            "required": [
              "highlighted",
              "plain"
            ],
            "type": "object",
            "properties": {
              "plain": {
                "type": "string"
              },
              "highlighted": {
                "type": "string"
              }
            }
          }
        }
      },
      "get_organizations_organization_databases_database_branches_branch_passwords_param_data": {
        "required": [
          "access_host_url",
          "actor",
          "created_at",
          "database_branch",
          "deleted_at",
          "display_name",
          "expires_at",
          "id",
          "integrations",
          "region",
          "renewable",
          "role",
          "ttl_seconds",
          "username"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID for the password"
          },
          "access_host_url": {
            "type": "string",
            "description": "The host URL for the password"
          },
          "display_name": {
            "type": "string",
            "description": "The display name for the password"
          },
          "role": {
            "type": "string",
            "description": "The role for the password"
          },
          "created_at": {
            "type": "string",
            "description": "When the password was created"
          },
          "deleted_at": {
            "type": "string",
            "description": "When the password was deleted"
          },
          "expires_at": {
            "type": "string",
            "description": "When the password will expire"
          },
          "ttl_seconds": {
            "type": "number",
            "description": "Time to live (in seconds) for the password. The password will be invalid when TTL has passed"
          },
          "actor": {
            "required": [
              "avatar_url",
              "display_name",
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the actor"
              },
              "display_name": {
                "type": "string",
                "description": "The name of the actor"
              },
              "avatar_url": {
                "type": "string",
                "description": "The URL of the actor's avatar"
              }
            }
          },
          "region": {
            "required": [
              "display_name",
              "enabled",
              "id",
              "location",
              "provider",
              "public_ip_addresses",
              "slug"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the region"
              },
              "provider": {
                "type": "string",
                "description": "Provider for the region (ex. AWS)"
              },
              "enabled": {
                "type": "string",
                "description": "Whether or not the region is currently active"
              },
              "public_ip_addresses": {
                "type": "array",
                "description": "Public IP addresses for the region",
                "items": {
                  "type": "string"
                }
              },
              "display_name": {
                "type": "string",
                "description": "Name of the region"
              },
              "location": {
                "type": "string",
                "description": "Location of the region"
              },
              "slug": {
                "type": "string",
                "description": "The slug of the region"
              }
            }
          },
          "username": {
            "type": "string",
            "description": "The username for the password"
          },
          "renewable": {
            "type": "boolean",
            "description": "Whether or not th password can be renewed"
          },
          "database_branch": {
            "required": [
              "access_host_url",
              "id",
              "name",
              "production"
            ],
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name for the database branch"
              },
              "id": {
                "type": "string",
                "description": "The ID for the database branch"
              },
              "production": {
                "type": "boolean",
                "description": "Whether or not the database branch is a production database branch"
              },
              "access_host_url": {
                "type": "string",
                "description": "The access host for the database branch"
              }
            }
          },
          "integrations": {
            "type": "array",
            "description": "Integrations the password is associated with",
            "items": {
              "$ref": "#/components/schemas/get_organizations_organization_databases_database_branches_branch_passwords_param_integrations"
            }
          }
        }
      },
      "get_organizations_organization_databases_database_branches_branch_passwords_id_param_integrations": {
        "required": [
          "content",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "content": {
            "required": [
              "highlighted",
              "plain"
            ],
            "type": "object",
            "properties": {
              "plain": {
                "type": "string"
              },
              "highlighted": {
                "type": "string"
              }
            }
          }
        }
      },
      "post_organizations_organization_databases_database_branches_branch_passwords_id_renew_param_integrations": {
        "required": [
          "content",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "content": {
            "required": [
              "highlighted",
              "plain"
            ],
            "type": "object",
            "properties": {
              "plain": {
                "type": "string"
              },
              "highlighted": {
                "type": "string"
              }
            }
          }
        }
      },
      "post_organizations_organization_databases_database_branches_branch_passwords_param_integrations": {
        "required": [
          "content",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "content": {
            "required": [
              "highlighted",
              "plain"
            ],
            "type": "object",
            "properties": {
              "plain": {
                "type": "string"
              },
              "highlighted": {
                "type": "string"
              }
            }
          }
        }
      },
      "patch_organizations_organization_databases_database_branches_branch_passwords_id_param_integrations": {
        "required": [
          "content",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "content": {
            "required": [
              "highlighted",
              "plain"
            ],
            "type": "object",
            "properties": {
              "plain": {
                "type": "string"
              },
              "highlighted": {
                "type": "string"
              }
            }
          }
        }
      },
      "get_organizations_organization_oauth-applications_param_data": {
        "required": [
          "avatar",
          "client_id",
          "created_at",
          "domain",
          "id",
          "name",
          "redirect_uri",
          "scopes",
          "tokens",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the OAuth application"
          },
          "name": {
            "type": "string",
            "description": "The name of the OAuth application"
          },
          "redirect_uri": {
            "type": "string",
            "description": "The redirect URI of the OAuth application"
          },
          "domain": {
            "type": "string",
            "description": "The domain of the OAuth application. Used for verification of a valid redirect uri"
          },
          "created_at": {
            "type": "string",
            "description": "When the OAuth application was created"
          },
          "updated_at": {
            "type": "string",
            "description": "When the OAuth application was last updated"
          },
          "scopes": {
            "type": "array",
            "description": "The scopes that the OAuth application requires on a user's accout",
            "items": {
              "type": "string"
            }
          },
          "avatar": {
            "type": "string",
            "description": "The image source for the OAuth application's avatar"
          },
          "client_id": {
            "type": "string",
            "description": "The OAuth application's unique client id"
          },
          "tokens": {
            "type": "number",
            "description": "The number of tokens issued by the OAuth application"
          }
        }
      },
      "get_organizations_organization_oauth-applications_application_id_tokens_param_data": {
        "required": [
          "actor_display_name",
          "actor_id",
          "actor_type",
          "avatar_url",
          "created_at",
          "display_name",
          "expires_at",
          "id",
          "last_used_at",
          "name",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the service token"
          },
          "display_name": {
            "type": "string",
            "description": "The display name of the service token"
          },
          "avatar_url": {
            "type": "string",
            "description": "The image source for the avatar of the service token"
          },
          "created_at": {
            "type": "string",
            "description": "When the service token was created"
          },
          "updated_at": {
            "type": "string",
            "description": "When the service token was last updated"
          },
          "expires_at": {
            "type": "string",
            "description": "When the service token will expire"
          },
          "last_used_at": {
            "type": "string",
            "description": "When the service token was last used"
          },
          "name": {
            "type": "string",
            "description": "The name of the service token"
          },
          "actor_id": {
            "type": "string",
            "description": "The ID of the actor on whose behalf the service token was created"
          },
          "actor_display_name": {
            "type": "string",
            "description": "The name of the actor on whose behalf the service token was created"
          },
          "actor_type": {
            "type": "string",
            "description": "The type of the actor on whose behalf the service token was created"
          }
        }
      },
      "get_organizations_organization_oauth-applications_application_id_tokens_token_id_param_users": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the user"
          },
          "id": {
            "type": "string",
            "description": "The ID of the user"
          }
        }
      },
      "get_organizations_organization_oauth-applications_application_id_tokens_token_id_param_accesses": {
        "required": [
          "description",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the access scope"
          },
          "description": {
            "type": "string",
            "description": "The description of the access scope"
          }
        }
      },
      "get_organizations_organization_oauth-applications_application_id_tokens_token_id_param_organizations": {
        "required": [
          "id",
          "name",
          "url"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the organization"
          },
          "id": {
            "type": "string",
            "description": "The ID of the organization"
          },
          "url": {
            "type": "string",
            "description": "The PlanetScale app URL for the organization"
          }
        }
      },
      "get_organizations_organization_oauth-applications_application_id_tokens_token_id_param_databases": {
        "required": [
          "id",
          "name",
          "organization",
          "url"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the database the token has access to"
          },
          "id": {
            "type": "string",
            "description": "The ID of the database the token has access to"
          },
          "organization": {
            "type": "string",
            "description": "The name of the database's organization"
          },
          "url": {
            "type": "string",
            "description": "The PlanetScale app URL for the database"
          }
        }
      },
      "get_organizations_organization_oauth-applications_application_id_tokens_token_id_param_branches": {
        "required": [
          "database",
          "id",
          "name",
          "organization",
          "url"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the branch"
          },
          "id": {
            "type": "string",
            "description": "The ID of the branch"
          },
          "database": {
            "type": "string",
            "description": "The name of the database the branch belongs to"
          },
          "organization": {
            "type": "string",
            "description": "The name of the organization the branch belongs to"
          },
          "url": {
            "type": "string",
            "description": "The PlanetScale app URL for the branch"
          }
        }
      },
      "post_organizations_organization_oauth-applications_id_token_param_service_token_accesses": {
        "type": "object",
        "properties": {
          "access": {
            "type": "string",
            "description": "The name of the OAuth token access"
          },
          "description": {
            "type": "string",
            "description": "The description of the OAuth token access"
          },
          "resource_name": {
            "type": "string",
            "description": "The name of the resource the OAuth token access gives access to"
          },
          "resource_id": {
            "type": "string",
            "description": "The ID of the resource the OAuth token access gives access to"
          },
          "resource_type": {
            "type": "string",
            "description": "The type of the resource the OAuth token access gives access to"
          },
          "resource": {
            "required": [
              "created_at",
              "deleted_at",
              "id",
              "name",
              "updated_at"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID for the resource"
              },
              "name": {
                "type": "string",
                "description": "The name for the resource"
              },
              "created_at": {
                "type": "string",
                "description": "When the resource was created"
              },
              "updated_at": {
                "type": "string",
                "description": "When the resource was last updated"
              },
              "deleted_at": {
                "type": "string",
                "description": "When the resource was deleted, if deleted"
              }
            }
          }
        }
      },
      "get_organizations_param_data": {
        "required": [
          "admin_only_production_access",
          "billing_email",
          "can_create_databases",
          "created_at",
          "database_count",
          "free_databases_remaining",
          "has_past_due_invoices",
          "id",
          "name",
          "plan",
          "single_tenancy",
          "sleeping_database_count",
          "sso",
          "sso_directory",
          "updated_at",
          "valid_billing_info"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID for the organization"
          },
          "name": {
            "type": "string",
            "description": "The name of the organization"
          },
          "billing_email": {
            "type": "string",
            "description": "The billing email of the organization"
          },
          "created_at": {
            "type": "string",
            "description": "When the organization was created"
          },
          "updated_at": {
            "type": "string",
            "description": "When the organization was last updated"
          },
          "plan": {
            "type": "string",
            "description": "The billing plan of the organization"
          },
          "valid_billing_info": {
            "type": "boolean",
            "description": "Whether or not the organization's billing information is valid"
          },
          "sso": {
            "type": "boolean",
            "description": "Whether or not SSO is enabled on the organization"
          },
          "sso_directory": {
            "type": "boolean",
            "description": "Whether or not the organization uses a WorkOS directory"
          },
          "single_tenancy": {
            "type": "boolean",
            "description": "Whether or not the organization has single tenancy enabled"
          },
          "has_past_due_invoices": {
            "type": "boolean",
            "description": "Whether or not the organization has past due billing invoices"
          },
          "can_create_databases": {
            "type": "boolean",
            "description": "Whether or not more databases can be created in the organization"
          },
          "free_databases_remaining": {
            "type": "number",
            "description": "The number of remaining free databases that can be created in the organization"
          },
          "database_count": {
            "type": "number",
            "description": "The number of databases in the organization"
          },
          "sleeping_database_count": {
            "type": "number",
            "description": "The number of sleeping databases in the organization"
          },
          "admin_only_production_access": {
            "type": "boolean",
            "description": "Whether or not only administrators can access production branches in the organization"
          },
          "sso_portal_url": {
            "type": "string",
            "description": "The URL of the organization's SSO portal"
          },
          "flags": {
            "type": "object",
            "properties": {
              "example_flag": {
                "type": "string",
                "enum": [
                  "full",
                  "on"
                ]
              }
            }
          },
          "features": {
            "type": "object",
            "properties": {
              "insights": {
                "type": "boolean"
              },
              "sso": {
                "type": "boolean"
              },
              "single_tenancy": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "get_organizations_name_region_param_data": {
        "required": [
          "display_name",
          "enabled",
          "id",
          "location",
          "provider",
          "public_ip_addresses",
          "slug"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the region"
          },
          "provider": {
            "type": "string",
            "description": "Provider for the region (ex. AWS)"
          },
          "enabled": {
            "type": "string",
            "description": "Whether or not the region is currently active"
          },
          "public_ip_addresses": {
            "type": "array",
            "description": "Public IP addresses for the region",
            "items": {
              "type": "string"
            }
          },
          "display_name": {
            "type": "string",
            "description": "Name of the region"
          },
          "location": {
            "type": "string",
            "description": "Location of the region"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the region"
          }
        }
      },
      "get_organizations_organization_databases_database_deploy-requests_param_data": {
        "required": [
          "actor",
          "approved",
          "branch",
          "branch_deleted",
          "branch_deleted_at",
          "branch_deleted_by",
          "closed_at",
          "closed_by",
          "created_at",
          "deployed_at",
          "deployment_state",
          "html_body",
          "html_url",
          "id",
          "into_branch",
          "into_branch_shard_count",
          "into_branch_sharded",
          "notes",
          "number",
          "state",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "number": {
            "type": "number",
            "description": "The number of the deploy request"
          },
          "id": {
            "type": "string",
            "description": "The ID of the deploy request"
          },
          "actor": {
            "required": [
              "avatar_url",
              "display_name",
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the actor"
              },
              "display_name": {
                "type": "string",
                "description": "The name of the actor"
              },
              "avatar_url": {
                "type": "string",
                "description": "The URL of the actor's avatar"
              }
            }
          },
          "closed_by": {
            "required": [
              "avatar_url",
              "display_name",
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the actor"
              },
              "display_name": {
                "type": "string",
                "description": "The name of the actor"
              },
              "avatar_url": {
                "type": "string",
                "description": "The URL of the actor's avatar"
              }
            }
          },
          "branch": {
            "type": "string",
            "description": "The name of the branch the deploy request was created from"
          },
          "branch_deleted": {
            "type": "boolean",
            "description": "Whether or not the deploy request branch was deleted"
          },
          "branch_deleted_by": {
            "required": [
              "avatar_url",
              "display_name",
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the actor"
              },
              "display_name": {
                "type": "string",
                "description": "The name of the actor"
              },
              "avatar_url": {
                "type": "string",
                "description": "The URL of the actor's avatar"
              }
            }
          },
          "branch_deleted_at": {
            "type": "string",
            "description": "When the deploy request branch was deleted"
          },
          "into_branch": {
            "type": "string",
            "description": "The name of the branch the deploy request will be merged into"
          },
          "into_branch_sharded": {
            "type": "boolean",
            "description": "Whether or not the branch the deploy request will be merged into is sharded"
          },
          "into_branch_shard_count": {
            "type": "number",
            "description": "The number of shards the branch the deploy request will be merged into has"
          },
          "approved": {
            "type": "boolean",
            "description": "Whether or not the deploy request is approved"
          },
          "state": {
            "type": "string",
            "description": "Whether the deploy request is open or closed",
            "enum": [
              "open",
              "closed"
            ]
          },
          "deployment_state": {
            "type": "string",
            "description": "The deployment state of the deploy request",
            "enum": [
              "pending",
              "ready",
              "no_changes",
              "queued",
              "submitting",
              "in_progress",
              "pending_cutover",
              "in_progress_vschema",
              "in_progress_cancel",
              "in_progress_cutover",
              "complete",
              "complete_cancel",
              "complete_error",
              "complete_pending_revert",
              "in_progress_revert",
              "complete_revert",
              "complete_revert_error",
              "cancelled",
              "error"
            ]
          },
          "html_url": {
            "type": "string",
            "description": "The PlanetScale app address for the deploy request"
          },
          "notes": {
            "type": "string",
            "description": "Notes on the deploy request"
          },
          "html_body": {
            "type": "string",
            "description": "The HTML body of the deploy request"
          },
          "created_at": {
            "type": "string",
            "description": "When the deploy request was created"
          },
          "updated_at": {
            "type": "string",
            "description": "When the deploy request was last updated"
          },
          "closed_at": {
            "type": "string",
            "description": "When the deploy request was closed"
          },
          "deployed_at": {
            "type": "string",
            "description": "When the deploy request was deployed"
          }
        }
      },
      "get_organizations_organization_databases_database_deploy-requests_number_operations_param_data": {
        "required": [
          "can_drop_data",
          "created_at",
          "ddl_statement",
          "deploy_error_docs_url",
          "deploy_errors",
          "eta_seconds",
          "id",
          "keyspace_name",
          "operation_name",
          "progress_percentage",
          "state",
          "syntax_highlighted_ddl",
          "table_name",
          "table_recently_used",
          "table_recently_used_at",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID for the deploy operation"
          },
          "state": {
            "type": "string",
            "description": "The state of the deploy operation",
            "enum": [
              "pending",
              "queued",
              "in_progress",
              "complete",
              "cancelled",
              "error"
            ]
          },
          "keyspace_name": {
            "type": "string",
            "description": "The keyspace modified by the deploy operation"
          },
          "table_name": {
            "type": "string",
            "description": "The name of the table modifed by the deploy operation"
          },
          "operation_name": {
            "type": "string",
            "description": "The operation name of the deploy operation"
          },
          "eta_seconds": {
            "type": "number",
            "description": "The estimated seconds until completion for the deploy operation"
          },
          "progress_percentage": {
            "type": "number",
            "description": "The percent completion for the deploy operation"
          },
          "deploy_error_docs_url": {
            "type": "string",
            "description": "A link to documentation explaining the deploy error, if present"
          },
          "ddl_statement": {
            "type": "string",
            "description": "The DDL statement for the deploy operation"
          },
          "syntax_highlighted_ddl": {
            "type": "string",
            "description": "A syntax-highlighted DDL statement for the deploy operation"
          },
          "created_at": {
            "type": "string",
            "description": "When the deploy operation was created"
          },
          "updated_at": {
            "type": "string",
            "description": "When the deploy operation was last updated"
          },
          "can_drop_data": {
            "type": "boolean",
            "description": "Whether or not the deploy operation is capable of dropping data"
          },
          "table_recently_used": {
            "type": "boolean",
            "description": "Whether or not the table modified by the deploy operation was recently used"
          },
          "table_recently_used_at": {
            "type": "string",
            "description": "When the table modified by the deploy operation was last used"
          },
          "deploy_errors": {
            "type": "array",
            "description": "Deploy errors for the deploy operation",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "get_organizations_organization_databases_database_deploy-queue_param_data": {
        "required": [
          "auto_cutover",
          "created_at",
          "cutover_at",
          "cutover_expiring",
          "deploy_check_errors",
          "finished_at",
          "id",
          "queued_at",
          "ready_to_cutover_at",
          "started_at",
          "state",
          "submitted_at",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID for a deployment"
          },
          "auto_cutover": {
            "type": "boolean",
            "description": "Whether or not to automatically cutover once deployment is finished"
          },
          "created_at": {
            "type": "string",
            "description": "When the deployment was created"
          },
          "cutover_at": {
            "type": "string",
            "description": "When the cutover for the deployment was initiated"
          },
          "cutover_expiring": {
            "type": "boolean",
            "description": "Whether or not the deployment cutover will expire soon and be cancelled"
          },
          "deploy_check_errors": {
            "type": "string",
            "description": "Deploy check errors for the deployment"
          },
          "finished_at": {
            "type": "string",
            "description": "When the deployment was finished"
          },
          "queued_at": {
            "type": "string",
            "description": "When the deployment was queued"
          },
          "ready_to_cutover_at": {
            "type": "string",
            "description": "When the deployment was ready for cutover"
          },
          "started_at": {
            "type": "string",
            "description": "When the deployment was started"
          },
          "state": {
            "type": "string",
            "description": "The state the deployment is in",
            "enum": [
              "pending",
              "ready",
              "no_changes",
              "queued",
              "submitting",
              "in_progress",
              "pending_cutover",
              "in_progress_vschema",
              "in_progress_cancel",
              "in_progress_cutover",
              "complete",
              "complete_cancel",
              "complete_error",
              "complete_pending_revert",
              "in_progress_revert",
              "complete_revert",
              "complete_revert_error",
              "cancelled",
              "error"
            ]
          },
          "submitted_at": {
            "type": "string",
            "description": "When the deployment was submitted"
          },
          "updated_at": {
            "type": "string",
            "description": "When the deployment was last updated"
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKeyHeader": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "x-readme": {
    "explorer-enabled": false
  }
}
